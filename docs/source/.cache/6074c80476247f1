{
  "returncode": 0,
  "output": "usage: nvtest run [-hw] [-d directory] [-k expression] [-o option] [-p expression] [--no-header] [--no-summary]\n                  [--durations N] [-r char] [--fail-fast] [--copy-all-resources] [-l resource]\n                  [pathspec ...]\n\nFind and run tests from a pathspec\n\npositional arguments:\n  pathspec              Test file[s] or directories to search\n\noptions:\n  -h, --help            show this help message and exit\n  -w                    Remove test execution directory, if it exists [default: False]\n  -d directory, --work-tree directory\n                        Set the path to the working tree. It can be an absolute path or a path relative to the current working directory. [default:\n                        ./TestResults]\n  --fail-fast           Stop after first failed test [default: False]\n  --copy-all-resources  Do not link resources to the test directory, only copy [default: False]\n\nfiltering:\n  -k expression         Only run tests matching given keyword expression. For example: `-k 'key1 and not key2'`.\n  -o option             Turn option(s) on, such as '-o dbg' or '-o intel'\n  -p expression         Filter tests by parameter name and value, such as '-p np=8' or '-p np<8'\n\nconsole reporting:\n  --no-header           Disable printing header [default: False]\n  --no-summary          Disable summary [default: False]\n  --durations N         Show N slowest test durations (N=0 for all)\n  -r char               Test progress reporting as specified by char: (v)verbose: show start/finish/status of each test case as it occurs; (b)ar: show\n                        progress bar as tests progress. [default: v]\n\nresource control:\n  -l resource           Defines resources that are required by the test session and establishes limits to the amount of resources that can be\n                        consumed. The -l resource argument is of the form: scope:type=value. The possible scope:type=value settings are\n                        \u2022 session:workers=N: Execute the test session asynchronously using a pool of at most N workers [default: auto]\n                        \u2022 session:cpu_count=N: Occupy at most N cpu cores at any one time.\n                        \u2022 session:cpu_ids=L: Comma separated list of CPU ids available to the session, mutually exclusive with session:cpu_count.\n                        \u2022 session:gpu_count=N: Occupy at most N gpus at any one time.\n                        \u2022 session:gpu_ids=L: Comma separated list of GPU ids available to the session, mutually exclusive with session:gpu_count.\n                        \u2022 session:timeout=T: Set a timeout on test session execution in seconds (accepts Go's duration format, eg, 40s, 1h20m, 2h,\n                        4h30m30s) [default: 60m]\n                        \u2022 test:cpu_count=[n:]N: Skip tests requiring less than n and more than N cpu cores [default: [1, machine:cpu_count]]\n                        \u2022 test:gpu_count=[n:]N: Skip tests requiring less than n and more than N gpus [default: [0, machine:gpu_count]]\n                        \u2022 test:node_count=[n:]N: Skip tests requiring less than n and more than N nodes [default: [1, machine:node_count]]\n                        \u2022 test:timeout=T: Set a timeout on any single test execution in seconds (accepts Go's duration format, eg, 40s, 1h20m, 2h,\n                        4h30m30s)\n                        \u2022 test:timeoutx=R: Set a timeout multiplier for all tests [default: 1.0]\n                        \u2022 batch:count=N: Execute tests in N batches.\n                        \u2022 batch:length=T: Execute tests in batches having runtimes of approximately T seconds. [default: 30 min]\n                        \u2022 batch:runner=S: Use runner 'S' to run the test batches.\n                        \u2022 batch:workers=N: Execute tests in a batch asynchronously using a pool of at most N workers [default: auto]\n                        \u2022 batch:runner_args=A: Any additional args 'A' are passed directly to the runner, for example, batch:runner_args=--account=ABC\n                        will pass --account=ABC to the runner\n\nThe behavior nvtest run is context dependent.\n\nFor new test sessions, the pathspec argument is scanned for test files to add\nto the session.  pathspec can be one (or more) of the following types:\n\n\u2022 directory name: the directory is recursively searched for recognized test file extensions;\n\u2022 specific test files; and\n\u2022 '.json' or '.yaml' file containing specific paths to tests and/or directories with the following schema:\n\n  .. code-block:: yaml\n\n    testpaths:\n    - root: str\n      paths: [path, ...]\n\n  where paths is a list of file paths relative to root.\n\nFor existing test sessions, the pathspec argument is scanned for tests to rerun.\npathspec can be one (or more) of the following types:\n\n\u2022 directory name: run test files in this directory and its children;\n\u2022 test id: run this specific test, specified as ``/ID``;\n\u2022 test file: run the test defined in this file; and\n\u2022 batch spec: run this batch of tests, specified as ``^BATCH_LOT:BATCH_NO``."
}