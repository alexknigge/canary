{
  "returncode": 0,
  "output": "usage: nvtest run [-hw] [-d directory] [--recurse-cmake] [-k expression] [-o option] [-p expression] [-R regex]\n                  [--no-header] [--no-summary] [--durations N] [-r char] [--fail-fast] [-P {permissive,pedantic}]\n                  [--copy-all-resources] [--dont-measure] [-l resource] [--timeout-multiplier X] [-b resource]\n                  [--stage STAGE] [-f file] [--mail-to MAIL_TO] [--mail-from MAIL_FROM]\n                  [pathspec ...]\n\nFind and run tests from a pathspec\n\npositional arguments:\n  pathspec              Test file[s] or directories to search\n\noptions:\n  -h, --help            show this help message and exit\n  -w                    Remove test execution directory, if it exists [default: False]\n  -d directory, --work-tree directory\n                        Set the path to the working tree. It can be an absolute path or a path relative to the current\n                        working directory. [default: ./TestResults]\n  --fail-fast           Stop after first failed test [default: False]\n  -P {permissive,pedantic}\n                        If pedantic (default), stop if file parsing errors occur, else ignore parsing errors\n  --copy-all-resources  Do not link resources to the test directory, only copy [default: False]\n  --dont-measure        Do not collect a test's process information [default: False]\n  --stage STAGE         Run this execution stage [default: run]\n  -f file               Read test paths from a json or yaml file. The file schema is {\"testpaths\": [\"root\": str, \"paths\":\n                        [str, ...], ...]}, where paths is a list of files relative to root\n\nfiltering:\n  --recurse-cmake       Recurse CMake binary directory for test files. CTest tests can be detected from the root\n                        CTestTestfile.cmake, so this is option is not necessary unless there is a mix of CTests and other\n                        test types in the binary directory\n  -k expression         Only run tests matching given keyword expression. For example: `-k 'key1 and not key2'`.\n  -o option             Turn option(s) on, such as '-o dbg' or '-o intel'\n  -p expression         Filter tests by parameter name and value, such as '-p cpus=8' or '-p cpus<8'\n  -R regex              Include tests containing the regular expression regex in at least 1 of its file assets. regex is a\n                        python regular expression, see https://docs.python.org/3/library/re.html\n\nconsole reporting:\n  --no-header           Disable printing header [default: False]\n  --no-summary          Disable summary [default: False]\n  --durations N         Show N slowest test durations (N=0 for all)\n  -r char               Test progress reporting as specified by char: (v)verbose: show start/finish/status of each test case\n                        as it occurs; (b)ar: show progress bar as tests progress. [default: v]\n\nresource control:\n  -l resource           Defines resources that are required by the test session and establishes limits to the amount of\n                        resources that can be consumed. The -l resource argument is of the form: type=value. The possible\n                        type=value settings are\n                        \u2022 workers=N: Execute the test session asynchronously using a pool of at most N workers\n                        \u2022 cpu_count=N: Occupy at most N cpu cores at any one time.\n                        \u2022 gpu_count=N: Occupy at most N gpus at any one time.\n                        \u2022 timeout=T: Set a timeout on test session execution in seconds (accepts Go's duration format, eg,\n                        40s, 1h20m, 2h, 4h30m30s) [default: None]\n                        \n\n  --timeout-multiplier X\n                        Set a timeout multiplier for all tests [default: 1.0]\n\nbatch control:\n  -b resource           Defines resources required to batch and schedule test batches. The -b resource argument is of the\n                        form: type=value. The possible type=value settings are\n                        \u2022 count=N: Execute tests in N batches. Sets scheme=count\n                        \u2022 duration=T: Execute tests in batches having runtimes of approximately T seconds. Sets\n                        scheme=duration [default: 30 min]\n                        \u2022 scheme=S: Partition tests into batches using the scheme {duration, count, isolate} [default: None]\n                        \u2022 scheduler=S: Submit test batches to scheduler 'S'.\n                        \u2022 workers=N: Execute tests in a batch asynchronously using a pool of at most N workers [default:\n                        auto]\n                        \u2022 scheduler_args=A: Any additional args 'A' are passed directly to the scheduler, for example,\n                        scheduler_args=--account=ABC will pass --account=ABC to the scheduler\n\nplugin options:\n  --mail-to MAIL_TO     Send a test session summary to the comma separated list of email addresses\n  --mail-from MAIL_FROM\n                        Send mail from this user [default: tjfulle@sandia.gov] summary of test session\n\nThe behavior nvtest run is context dependent.\n\nFor new test sessions, the pathspec argument is scanned for test files to add\nto the session.  pathspec can be one (or more) of the following types:\n\n\u2022 directory name: the directory is recursively searched for recognized test file extensions;\n\u2022 specific test files; and\n\nFor existing test sessions, the pathspec argument is scanned for tests to rerun.\npathspec can be one (or more) of the following types:\n\n\u2022 directory name: run test files in this directory and its children;\n\u2022 test id: run this specific test, specified as ``/ID``;\n\u2022 test file: run the test defined in this file; and\n\u2022 batch spec: run this batch of tests, specified as ``^BATCH_ID``."
}