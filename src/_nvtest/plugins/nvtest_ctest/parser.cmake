# Helpers for parsing CTestTestfile.cmake
# For list of test properties,
# see https://cmake.org/cmake/help/git-master/manual/cmake-properties.7.html#id5

macro(add_test NAME)
  set(cmdargs "${ARGN}")
  cmake_list_to_json_list(cmdargs args)
  message("{\"test\": {\"name\": \"${NAME}\", \"args\": ${args}}}")
endmacro()

macro(subdirs)
  # Ignore subdirs since we just crawl looking for CTest files
endmacro()

macro(set_tests_properties NAME)
  cmake_parse_arguments(
    p
    "PROPERTIES;WILL_FAIL;DISABLED;RUN_SERIAL;PROCESSOR_AFFINITY"
    "GENERATED_RESOURCE_SPEC_FILE;PROCESSORS;TIMEOUT;TIMEOUT_SIGNAL_NAME;TIMEOUT_SIGNAL_GRACE_PERIOD;COST;SKIP_RETURN_CODE;MEASUREMENT;WORKING_DIRECTORY"
    "ATTACHED_FILES;ATTACHED_FILES_ON_FAIL;FIXTURES_SETUP;FIXTURES_CLEANUP;FIXTURES_REQUIRED;REQUIRED_FILES;FAIL_REGULAR_EXPRESSION;SKIP_REGULAR_EXPRESSION;DEPENDS;ENVIRONMENT;ENVIRONMENT_MODIFICATION;LABELS;PASS_REGULAR_EXPRESSION;RESOURCE_GROUPS;RESOURCE_LOCK;_BACKTRACE_TRIPLES;TIMEOUT_AFTER_MATCH"
    ${ARGN}
  )
  set(output "{\"name\": \"${NAME}\"")

  if (p_ATTACHED_FILES)
    cmake_list_to_json_list(p_ATTACHED_FILES arg)
    string(APPEND output ", \"attached_files\": ${arg}")
  else()
    string(APPEND output ", \"attached_files\": null")
  endif()

  if (p_ATTACHED_FILES_ON_FAIL)
    cmake_list_to_json_list(p_ATTACHED_FILES_ON_FAIL arg)
    string(APPEND output ", \"attached_files_on_fail\": ${arg}")
  else()
    string(APPEND output ", \"attached_files_on_fail\": null")
  endif()

  if (p_COST)
    string(APPEND output ", \"cost\": ${p_COST}")
  else()
    string(APPEND output ", \"cost\": null")
  endif()

  if (p_DEPENDS)
    cmake_list_to_json_list(p_DEPENDS arg)
    string(APPEND output ", \"depends\": ${arg}")
  else()
    string(APPEND output ", \"depends\": null")
  endif()

  if (p_DISABLED)
    string(APPEND output ", \"disabled\": true")
  else()
    string(APPEND output ", \"disabled\": false")
  endif()

  if (p_ENVIRONMENT)
    cmake_env_list_to_json_mapping(p_ENVIRONMENT arg)
    string(APPEND output ", \"environment\": ${arg}")
  else()
    string(APPEND output ", \"environment\": null")
  endif()

  if (p_ENVIRONMENT_MODIFICATION)
    cmake_envmod_list_to_json_list(p_ENVIRONMENT_MODIFICATION arg)
    string(APPEND output ", \"environment_modification\": ${arg}")
  else()
    string(APPEND output ", \"environment_modification\": null")
  endif()

  if (p_FAIL_REGULAR_EXPRESSION)
    cmake_list_to_json_list(p_FAIL_REGULAR_EXPRESSION arg)
    string(APPEND output ", \"fail_regular_expression\": ${arg}")
  else()
    string(APPEND output ", \"fail_regular_expression\": null")
  endif()

  if (p_FIXTURES_CLEANUP)
    cmake_list_to_json_list(p_FIXTURES_CLEANUP arg)
    string(APPEND output ", \"fixtures_cleanup\": ${arg}")
  else()
    string(APPEND output ", \"fixtures_cleanup\": null")
  endif()

  if (p_FIXTURES_REQUIRED)
    cmake_list_to_json_list(p_FIXTURES_REQUIRED arg)
    string(APPEND output ", \"fixtures_required\": ${arg}")
  else()
    string(APPEND output ", \"fixtures_required\": null")
  endif()

  if (p_FIXTURES_SETUP)
    cmake_list_to_json_list(p_FIXTURES_SETUP arg)
    string(APPEND output ", \"fixtures_setup\": ${arg}")
  else()
    string(APPEND output ", \"fixtures_setup\": null")
  endif()

  if (p_GENERATED_RESOURCE_SPEC_FILE)
    set(arg "\"${p_GENERATED_RESOURCE_SPEC_FILE}\"")
    string(APPEND output ", \"generated_resource_spec_file\": \"${p_GENERATED_RESOURCE_SPEC_FILE}\"")
  else()
    string(APPEND output ", \"generated_resource_spec_file\": null")
  endif()

  if (p_LABELS)
    cmake_list_to_json_list(p_LABELS arg)
    string(APPEND output ", \"labels\": ${arg}")
  else()
    string(APPEND output ", \"labels\": null")
  endif()

  if (p_MEASUREMENT)
    string(REGEX MATCH "([a-zA-Z_][a-zA-Z0-9_]*)=(.*)" match ${p_MEASUREMENT})
    if(match)
      string(REGEX REPLACE "([a-zA-Z_][a-zA-Z0-9_]*)=(.*)" "\\1" key ${match})
      string(REGEX REPLACE "([a-zA-Z_][a-zA-Z0-9_]*)=(.*)" "\\2" val ${match})
      if(val MATCHES "^[+-]?[0-9]+([.][0-9]+)?$")
        string(APPEND output ", \"measurement\": {\"${key}\": ${val}}")
      else()
        string(APPEND output ", \"measurement\": {\"${key}\": \"${val}\"}")
      endif()
    else()
      string(APPEND output ", \"measurement\": {\"${p_MEASUREMENT}\": 1}")
    endif()
  else()
    string(APPEND output ", \"measurement\": null")
  endif()

  if (p_PASS_REGULAR_EXPRESSION)
    cmake_list_to_json_list(p_PASS_REGULAR_EXPRESSION arg)
    string(APPEND output ", \"pass_regular_expression\": ${arg}")
  else()
    string(APPEND output ", \"pass_regular_expression\": null")
  endif()

  if (p_PROCESSOR_AFFINITY)
    string(APPEND output ", \"processor_affinity\": true")
  else()
    string(APPEND output ", \"processor_affinity\": false")
  endif()

  if (p_PROCESSORS)
    string(APPEND output ", \"processors\": ${p_PROCESSORS}")
  else()
    string(APPEND output ", \"processors\": null")
  endif()

  if (p_REQUIRED_FILES)
    cmake_list_to_json_list(p_REQUIRED_FILES arg)
    string(APPEND output ", \"required_files\": ${arg}")
  else()
    string(APPEND output ", \"required_files\": null")
  endif()

  if (p_RESOURCE_GROUPS)
    cmake_list_to_json_list(p_RESOURCE_GROUPS arg)
    string(APPEND output ", \"resource_groups\": ${arg}")
  else()
    string(APPEND output ", \"resource_groups\": null")
  endif()

  if (p_RESOURCE_LOCK)
    cmake_list_to_json_list(p_RESOURCE_LOCK arg)
    string(APPEND output ", \"resource_lock\": ${arg}")
  else()
    string(APPEND output ", \"resource_lock\": null")
  endif()

  if (p_RUN_SERIAL)
    string(APPEND output ", \"run_serial\": true")
  else()
    string(APPEND output ", \"run_serial\": false")
  endif()

  if (p_SKIP_REGULAR_EXPRESSION)
    cmake_list_to_json_list(p_SKIP_REGULAR_EXPRESSION arg)
    string(APPEND output ", \"skip_regular_expression\": ${arg}")
  else()
    string(APPEND output ", \"skip_regular_expression\": null")
  endif()

  if (p_SKIP_RETURN_CODE)
    string(APPEND output ", \"skip_return_code\": ${p_SKIP_RETURN_CODE}")
  else()
    string(APPEND output ", \"skip_return_code\": null")
  endif()

  if (p_TIMEOUT)
    string(APPEND output ", \"timeout\": ${p_TIMEOUT}")
  else()
    string(APPEND output ", \"timeout\": null")
  endif()

  if (p_TIMEOUT_AFTER_MATCH)
    list(GET p_TIMEOUT_AFTER_MATCH 0 seconds)
    list(GET p_TIMEOUT_AFTER_MATCH 1 pattern)
    string(APPEND output ", \"timeout_after_match\": {\"pattern\": \"${pattern}\", \"seconds\": ${seconds}}")
  else()
    string(APPEND output ", \"timeout_after_match\": null")
  endif()

  if (p_TIMEOUT_SIGNAL_GRACE_PERIOD)
    set(arg "${p_TIMEOUT_SIGNAL_GRACE_PERIOD}")
    string(APPEND output ", \"timeout_signal_grace_period\": ${p_TIMEOUT_SIGNAL_GRACE_PERIOD}")
  else()
    string(APPEND output ", \"timeout_signal_grace_period\": null")
  endif()

  if (p_TIMEOUT_SIGNAL_NAME)
    set(arg "\"${p_TIMEOUT_SIGNAL_NAME}\"")
    string(APPEND output ", \"timeout_signal_name\": \"${p_TIMEOUT_SIGNAL_NAME}\"")
  else()
    string(APPEND output ", \"timeout_signal_name\": null")
  endif()

  if (p_WILL_FAIL)
    string(APPEND output ", \"will_fail\": true")
  else()
    string(APPEND output ", \"will_fail\": false")
  endif()

  if (p_WORKING_DIRECTORY)
    string(APPEND output ", \"working_directory\": \"${p_WORKING_DIRECTORY}\"")
  else()
    string(APPEND output ", \"working_directory\": null")
  endif()

  if (p__BACKTRACE_TRIPLES)
    cmake_list_to_json_list(p__BACKTRACE_TRIPLES arg)
    string(APPEND output ", \"backtrace_triples\": ${arg}")
  else()
    string(APPEND output ", \"backtrace_triples\": null")
  endif()

  string(APPEND output "}")
  message("{\"properties\": ${output}}")
endmacro()


function(cmake_list_to_json_list source target)
  set(json "[")
  foreach(item ${${source}})
    if (json STREQUAL "[")
      set(sep "")
    else()
      set(sep ", ")
    endif()
    set(json "${json}${sep}\"${item}\"")
  endforeach()
  set(json "${json}]")
  set(${target} "${json}" PARENT_SCOPE)
endfunction()


function(cmake_env_list_to_json_mapping source target)
  set(json "{")
  foreach(item ${${source}})
    string(REGEX REPLACE "([a-zA-Z0-9_]+)=(.*)" "\\1" key ${item})
    string(REGEX REPLACE "([a-zA-Z0-9_]+)=(.*)" "\\2" value ${item})
    if (json STREQUAL "{")
      set(sep "")
    else()
      set(sep ", ")
    endif()
    set(json "${json}${sep}\"${key}\": \"${value}\"")
  endforeach()
  set(json "${json}}")
  set(${target} "${json}" PARENT_SCOPE)
endfunction()


function(cmake_envmod_list_to_json_list source target)
  set(json "[")
  foreach(item ${${source}})
    string(REGEX REPLACE "([^=]+)=([a-z_]+):(.*)" "\\1" key ${item})
    string(REGEX REPLACE "([^=]+)=([a-z_]+):(.*)" "\\2" op ${item})
    string(REGEX REPLACE "([^=]+)=([a-z_]+):(.*)" "\\3" value ${item})
    if (json STREQUAL "[")
      set(sep "")
    else()
      set(sep ", ")
    endif()
    set(json "${json}${sep}{\"name\": \"${key}\", \"op\": \"${op}\", \"value\": \"${value}\"}")
  endforeach()
  set(json "${json}]")
  set(${target} "${json}" PARENT_SCOPE)
endfunction()

if(NOT DEFINED TESTFILE)
    message(FATAL_ERROR "Specify a test file to parse using -DTESTFILE=<file>")
endif()

include(${TESTFILE})
