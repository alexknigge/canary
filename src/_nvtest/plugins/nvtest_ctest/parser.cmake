# Helpers for parsing CTestTestfile.cmake
# For list of test properties,
# see https://cmake.org/cmake/help/git-master/manual/cmake-properties.7.html#id5

function(add_test NAME)
  set(cmd "[")
  set(sep "")
  math(EXPR stop "${ARGC} - 1")
  foreach(i RANGE 1 ${stop})
    set(cmd "${cmd}${sep}\"${ARGV${i}}\"")
    set(sep ", ")
  endforeach()
  set(cmd "${cmd}]")
  set(output "{\"name\": \"${NAME}\", \"command\": ${cmd}}")
  execute_process(COMMAND ${CMAKE_COMMAND} -E echo "${output}")
endfunction()

macro(subdirs)
  # Ignore subdirs since we just crawl looking for CTest files
endmacro()

macro(set_tests_properties NAME)
  cmake_parse_arguments(
    p
    "PROPERTIES;WILL_FAIL;DISABLED;RUN_SERIAL;PROCESSOR_AFFINITY"
    "GENERATED_RESOURCE_SPEC_FILE;PROCESSORS;TIMEOUT;TIMEOUT_SIGNAL_NAME;TIMEOUT_SIGNAL_GRACE_PERIOD;COST;SKIP_RETURN_CODE;MEASUREMENT;WORKING_DIRECTORY"
    "ATTACHED_FILES;ATTACHED_FILES_ON_FAIL;FIXTURES_SETUP;FIXTURES_CLEANUP;FIXTURES_REQUIRED;REQUIRED_FILES;FAIL_REGULAR_EXPRESSION;SKIP_REGULAR_EXPRESSION;DEPENDS;ENVIRONMENT;ENVIRONMENT_MODIFICATION;LABELS;PASS_REGULAR_EXPRESSION;RESOURCE_GROUPS;RESOURCE_LOCK;_BACKTRACE_TRIPLES;TIMEOUT_AFTER_MATCH"
    ${ARGN}
  )
  set(properties "[")
  set(sep "")

  if (p_ATTACHED_FILES)
    cmake_list_to_json_list(p_ATTACHED_FILES arg)
    string(APPEND properties "${sep}{\"name\": \"ATTACHED_FILES\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_ATTACHED_FILES_ON_FAIL)
    cmake_list_to_json_list(p_ATTACHED_FILES_ON_FAIL arg)
    string(APPEND properties "${sep}{\"name\": \"ATTACHED_FILES_ON_FAIL\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_COST)
    string(APPEND properties "${sep}{\"name\": \"COST\", \"value\": ${p_COST}}")
    set(sep ", ")
  endif()

  if (p_DEPENDS)
    cmake_list_to_json_list(p_DEPENDS arg)
    string(APPEND properties "${sep}{\"name\": \"DEPENDS\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_DISABLED)
    string(APPEND properties "${sep}{\"name\": \"DEPENDS\", \"value\": true}")
    set(sep ", ")
  endif()

  if (p_ENVIRONMENT)
    cmake_list_to_json_list(p_ENVIRONMENT arg)
    string(APPEND properties "${sep}{\"name\": \"ENVIRONMENT\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_ENVIRONMENT_MODIFICATION)
    cmake_list_to_json_list(p_ENVIRONMENT_MODIFICATION arg)
    string(APPEND properties "${sep}{\"name\": \"ENVIRONMENT_MODIFICATION\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_FAIL_REGULAR_EXPRESSION)
    cmake_list_to_json_list(p_FAIL_REGULAR_EXPRESSION arg)
    string(APPEND properties "${sep}{\"name\": \"FAIL_REGULAR_EXPRESSION\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_FIXTURES_CLEANUP)
    cmake_list_to_json_list(p_FIXTURES_CLEANUP arg)
    string(APPEND properties "${sep}{\"name\": \"FIXTURES_CLEANUP\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_FIXTURES_REQUIRED)
    cmake_list_to_json_list(p_FIXTURES_REQUIRED arg)
    string(APPEND properties "${sep}{\"name\": \"FIXTURES_REQUIRED\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_FIXTURES_SETUP)
    cmake_list_to_json_list(p_FIXTURES_SETUP arg)
    string(APPEND properties "${sep}{\"name\": \"FIXTURES_SETUP\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_GENERATED_RESOURCE_SPEC_FILE)
    string(APPEND properties "${sep}{\"name\": \"GENERATED_RESOURCE_SPEC_FILE\", \"value\": \"${p_GENERATED_RESOURCE_SPEC_FILE}\"}")
    set(sep ", ")
  endif()

  if (p_LABELS)
    cmake_list_to_json_list(p_LABELS arg)
    string(APPEND properties "${sep}{\"name\": \"LABELS\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_MEASUREMENT)
    parse_measurement(p_MEASUREMENT arg)
    string(APPEND properties "${sep}{\"name\": \"MEASUREMENT\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_PASS_REGULAR_EXPRESSION)
    cmake_list_to_json_list(p_PASS_REGULAR_EXPRESSION arg)
    string(APPEND properties "${sep}{\"name\": \"PASS_REGULAR_EXPRESSION\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_PROCESSOR_AFFINITY)
    string(APPEND properties "${sep}{\"name\": \"PROCESSOR_AFFINITY\", \"value\": true}")
    set(sep ", ")
  endif()

  if (p_PROCESSORS)
    string(APPEND properties "${sep}{\"name\": \"PROCESSORS\", \"value\": ${p_PROCESSORS}}")
    set(sep ", ")
  endif()

  if (p_REQUIRED_FILES)
    cmake_list_to_json_list(p_REQUIRED_FILES arg)
    string(APPEND properties "${sep}{\"name\": \"REQUIRED_FILES\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_RESOURCE_GROUPS)
    parse_resource_groups(p_RESOURCE_GROUPS arg)
    string(APPEND properties "${sep}{\"name\": \"RESOURCE_GROUPS\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_RESOURCE_LOCK)
    cmake_list_to_json_list(p_RESOURCE_LOCK arg)
    string(APPEND properties "${sep}{\"name\": \"RESOURCE_LOCK\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_RUN_SERIAL)
    string(APPEND properties "${sep}{\"name\": \"RUN_SERIAL\", \"value\": true}")
    set(sep ", ")
  endif()

  if (p_SKIP_REGULAR_EXPRESSION)
    cmake_list_to_json_list(p_SKIP_REGULAR_EXPRESSION arg)
    string(APPEND properties "${sep}{\"name\": \"SKIP_REGULAR_EXPRESSION\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  if (p_SKIP_RETURN_CODE)
    string(APPEND properties "${sep}{\"name\": \"SKIP_RETURN_CODE\", \"value\": ${p_SKIP_RETURN_CODE}}")
    set(sep ", ")
  endif()

  if (p_TIMEOUT)
    string(APPEND properties "${sep}{\"name\": \"TIMEOUT\", \"value\": ${p_TIMEOUT}}")
    set(sep ", ")
  endif()

  if (p_TIMEOUT_AFTER_MATCH)
    list(GET p_TIMEOUT_AFTER_MATCH 0 seconds)
    list(GET p_TIMEOUT_AFTER_MATCH 1 pattern)
    string(APPEND properties "${sep}{\"name\": \"TIMEOUT_AFTER_MATCH\", \"value\": {\"pattern\": \"${pattern}\", \"seconds\": ${seconds}}}")
    set(sep ", ")
  endif()

  if (p_TIMEOUT_SIGNAL_GRACE_PERIOD)
    string(APPEND properties "${sep}{\"name\": \"TIMEOUT_SIGNAL_GRACE_PERIOD\", \"value\": ${p_TIMEOUT_SIGNAL_GRACE_PERIOD}}")
    set(sep ", ")
  endif()

  if (p_TIMEOUT_SIGNAL_NAME)
    string(APPEND properties "${sep}{\"name\": \"TIMEOUT_SIGNAL_NAME\", \"value\": \"${p_TIMEOUT_SIGNAL_NAME}\"}")
    set(sep ", ")
  endif()

  if (p_WILL_FAIL)
    string(APPEND properties "${sep}{\"name\": \"WILL_FAIL\", \"value\": true}")
    set(sep ", ")
  endif()

  if (p_WORKING_DIRECTORY)
    string(APPEND properties "${sep}{\"name\": \"WORKING_DIRECTORY\", \"value\": \"${p_WORKING_DIRECTORY}\"}")
    set(sep ", ")
  else()
    string(APPEND properties "${sep}{\"name\": \"WORKING_DIRECTORY\", \"value\": \"${FILE_DIRECTORY}\"}")
    set(sep ", ")
  endif()

  if (p__BACKTRACE_TRIPLES)
    cmake_list_to_json_list(p__BACKTRACE_TRIPLES arg)
    string(APPEND properties "${sep}{\"name\": \"BACKTRACE_TRIPLES\", \"value\": ${arg}}")
    set(sep ", ")
  endif()

  set(output "{\"name\": \"${NAME}\", \"properties\": ${properties}]}")
  execute_process(COMMAND ${CMAKE_COMMAND} -E echo "${output}")
endmacro()


function(cmake_list_to_json_list source target)
  set(json "[")
  set(sep "")
  foreach(item ${${source}})
    set(json "${json}${sep}\"${item}\"")
    set(sep ", ")
  endforeach()
  set(json "${json}]")
  set(${target} "${json}" PARENT_SCOPE)
endfunction()


function(parse_resource_groups source target)
  set(value "[")
  set(sep "")
  foreach(rg ${${source}})
    # set_tests_properties(resource_groups PROPERTIES RESOURCE_GROUPS "5,gpus:1")
    string(REGEX MATCH "([0-9]+),([^:]+):([0-9]+)" match ${rg})
    if(match)
      string(REGEX REPLACE "([0-9]+),([^:]+):([0-9]+)" "\\1" slots_avail  ${match})
      string(REGEX REPLACE "([0-9]+),([^:]+):([0-9]+)" "\\2" type  ${match})
      string(REGEX REPLACE "([0-9]+),([^:]+):([0-9]+)" "\\3" slots_per  ${match})
      foreach(i RANGE 1 ${slots_avail})
        set(value "${value}${sep}{\"requirements\": [{\".type\": \"${type}\", \"slots\": ${slots_per}}]}")
        set(sep ", ")
      endforeach()
    else()
      message(FATAL_ERROR "Unable to determine resource groups from ${rg}")
    endif()
  endforeach()
  set(value "${value}]")
  set(${target} "${value}" PARENT_SCOPE)
endfunction()

function(parse_measurement source target)
  set(value "")
  set(measurement "${${source}}")
  string(REGEX MATCH "([a-zA-Z_][a-zA-Z0-9_]*)=(.*)" match ${measurement})
  if(match)
    string(REGEX REPLACE "([a-zA-Z_][a-zA-Z0-9_]*)=(.*)" "\\1" key ${match})
    string(REGEX REPLACE "([a-zA-Z_][a-zA-Z0-9_]*)=(.*)" "\\2" val ${match})
    if(val MATCHES "^[+-]?[0-9]+([.][0-9]+)?$")
      string(APPEND value "{\"name\": \"${key}\", \"value\": ${val}}")
    else()
      string(APPEND value "{\"name\": \"${key}\", \"value\": \"${val}\"}")
    endif()
  else()
    string(APPEND value "{\"name\": \"${measurement}\", \"value\": 1}")
  endif()
  set(${target} "${value}" PARENT_SCOPE)
endfunction()

if(NOT DEFINED TESTFILE)
    message(FATAL_ERROR "Specify a test file to parse using -DTESTFILE=<file>")
endif()

get_filename_component(abspath "${TESTFILE}" ABSOLUTE)
get_filename_component(FILE_DIRECTORY "${abspath}" DIRECTORY)

include(${TESTFILE})
