# Helpers for parsing CTestTestfile.cmake


macro(add_test NAME)
  message("{\"test\": {\"name\": \"${NAME}\", \"args\": \"${ARGN}\"}}")
endmacro()


macro(subdirs)
  # Ignore subdirs since we just crawl looking for CTest files
endmacro()


macro(set_tests_properties NAME)
  cmake_parse_arguments(
    p
    "PROPERTIES;WILL_FAIL;DISABLED;RUN_SERIAL;PROCESSOR_AFFINITY"
    "PROCESSORS;DIRECTORY;TIMEOUT;TIMEOUT_SIGNAL_NAME;TIMEOUT_SIGNAL_GRACE_PERIOD;COST;SKIP_RETURN_CODE;MEASUREMENT;WORKING_DIRECTORY;TIMEOUT_AFTER_MATCH"
    "ATTACHED_FILES;ATTACHED_FILES_ON_FAIL;FIXTURES_SETUP;FIXTURES_CLEANUP;FIXTURES_REQUIRED;REQUIRED_FILES;FAIL_REGULAR_EXPRESSION;SKIP_REGULAR_EXPRESSION;DEPENDS;ENVIRONMENT;ENVIRONMENT_MODIFICATION;LABELS;PASS_REGULAR_EXPRESSION;RESOURCE_GROUPS;_BACKTRACE_TRIPLES"
    ${ARGN}
  )
  set(output "{\"name\": \"${NAME}\"")
  if (p_WILL_FAIL)
    string(APPEND output ", \"will_fail\": {\"type\": \"bool\", \"value\": \"1\"}")
  endif()
  if (p_DISABLED)
    string(APPEND output ", \"disabled\": {\"type\": \"bool\", \"value\": \"1\"}")
  endif()
  if (p_RUN_SERIAL)
    string(APPEND output ", \"run_serial\": {\"type\": \"bool\", \"value\": \"1\"}")
  endif()
  if (p_PROCESSOR_AFFINITY)
    string(APPEND output ", \"processor_affinity\": {\"type\": \"bool\", \"value\": \"1\"}")
  endif()
  if (p_PROCESSORS)
    string(APPEND output ", \"processors\": {\"type\": \"int\", \"value\": \"${p_PROCESSORS}\"}")
  endif()
  if (p_DIRECTORY)
    string(APPEND output ", \"directory\": {\"type\": \"str\", \"value\": \"${p_DIRECTORY}\"}")
  endif()
  if (p_TIMEOUT)
    string(APPEND output ", \"timeout\": {\"type\": \"float\", \"value\": \"${p_TIMEOUT}\"}")
  endif()
  if (p_TIMEOUT_SIGNAL_NAME)
    string(APPEND output ", \"timeout_signal_name\": {\"type\": \"str\", \"value\": \"${p_TIMEOUT_SIGNAL_NAME}\"}")
  endif()
  if (p_TIMEOUT_SIGNAL_GRACE_PERIOD)
    string(APPEND output ", \"timeout_signal_grace_period\": {\"type\": \"float\", \"value\": \"${p_TIMEOUT_SIGNAL_GRACE_PERIOD}\"}")
  endif()
  if (p_TIMEOUT_AFTER_MATCH)
    string(APPEND output ", \"timeout_after_match\": {\"type\": \"str\", \"value\": \"${p_TIMEOUT_AFTER_MATCH}\"}")
  endif()
  if (p_COST)
    string(APPEND output ", \"tcost\": {\"type\": \"float\", \"value\": \"${p_COST}\"}")
  endif()
  if (p_SKIP_RETURN_CODE)
    string(APPEND output ", \"skip_return_code\": {\"type\": \"int\", \"value\": \"${p_SKIP_RETURN_CODE}\"}")
  endif()
  if (p_MEASUREMENT)
    string(APPEND output ", \"skip_return_code\": {\"type\": \"str\", \"value\": \"${p_MEASUREMENT}\"}")
  endif()
  if (p_WORKING_DIRECTORY)
    string(APPEND output ", \"working_directory\": {\"type\": \"str\", \"value\": \"${p_WORKING_DIRECTORY}\"}")
  endif()
  if (p_ATTACHED_FILES_ON_FAIL)
    string(APPEND output ", \"attached_files_on_fail\": \"${p_ATTACHED_FILES_ON_FAIL}\"")
    string(APPEND output ", \"attached_files_on_fail\": {\"type\": \"list_of_str\", \"value\": \"${p_ATTACHED_FILES_ON_FAIL}\"}")
  endif()
  if (p_FIXTURES_SETUP)
    string(APPEND output ", \"fixtures_setup\": \"${p_FIXTURES_SETUP}\"")
    string(APPEND output ", \"fixtures_setup\": {\"type\": \"list_of_str\", \"value\": \"${p_FIXTURES_SETUP}\"}")
  endif()
  if (p_FIXTURES_CLEANUP)
    string(APPEND output ", \"fixtures_cleanup\": {\"type\": \"list_of_str\", \"value\": \"${p_FIXTURES_CLEANUP}\"}")
  endif()
  if (p_FIXTURES_REQUIRED)
    string(APPEND output ", \"fixtures_required\": {\"type\": \"list_of_str\", \"value\": \"${p_FIXTURES_REQUIRED}\"}")
  endif()
  if (p_REQUIRED_FILES)
    string(APPEND output ", \"required_files\": \"${p_REQUIRED_FILES}\"")
    string(APPEND output ", \"required_files\": {\"type\": \"list_of_str\", \"value\": \"${p_REQUIRED_FILES}\"}")
  endif()
  if (p_FAIL_REGULAR_EXPRESSION)
    string(APPEND output ", \"fail_regular_expression\": {\"type\": \"list_of_str\", \"value\": \"${p_FAIL_REGULAR_EXPRESSION}\"}")
  endif()
  if (p_SKIP_REGULAR_EXPRESSION)
    string(APPEND output ", \"skip_regular_expression\": {\"type\": \"list_of_str\", \"value\": \"${p_SKIP_REGULAR_EXPRESSION}\"}")
  endif()
  if (p_ENVIRONMENT)
    string(APPEND output ", \"environment\": {\"type\": \"list_of_var\", \"value\": \"${p_ENVIRONMENT}\"}")
  endif()
  if (p_ENVIRONMENT_MODIFICATION)
    string(APPEND output ", \"environment_modification\": {\"type\": \"list_of_var\", \"value\": \"${p_ENVIRONMENT_MODIFICATION}\"}")
  endif()
  if (p_LABELS)
    string(APPEND output ", \"labels\": {\"type\": \"list_of_str\", \"value\": \"${p_LABELS}\"}")
  endif()
  if (p_PASS_REGULAR_EXPRESSION)
    string(APPEND output ", \"pass_regular_expression\": {\"type\": \"list_of_str\", \"value\": \"${p_PASS_REGULAR_EXPRESSION}\"}")
  endif()
  if (p_RESOURCE_GROUPS)
    string(APPEND output ", \"resource_groups\": {\"type\": \"list_of_str\", \"value\": \"${p_RESOURCE_GROUPS}\"}")
  endif()
  if (p__BACKTRACE_TRIPLES)
    string(APPEND output ", \"backtrace_triples\": {\"type\": \"list_of_str\", \"value\": \"${p__BACKTRACE_TRIPLES}\"}")
  endif()
  string(APPEND output "}")
  message("{\"properties\": ${output}}")
endmacro()
