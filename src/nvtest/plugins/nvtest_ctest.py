import io
import os
import tokenize
from types import SimpleNamespace

import nvtest


def _ctest_to_pyt(file: str) -> list[str]:
    tests: dict[str, str] = {}
    tokens = tokenize.tokenize(open(file, "rb").readline)
    for token in tokens:
        if token.type == tokenize.NAME and token.string.lower() == "add_test":
            token = next(tokens)
            assert token.type == tokenize.OP and token.string == "("
            level = 1
            ttokens: list[tokenize.TokenInfo] = []
            while True:
                token = next(tokens)
                if token.type == tokenize.OP and token.string == ")":
                    level -= 1
                    if level == 0:
                        break
                ttokens.append(token)
            test = p_ADD_TEST(ttokens)
            tests[test.name] = test.command

    files: list[str] = []
    for name, command in tests.items():
        f = write_pyt(name, command)
        files.append(f)

    return files


def p_ADD_TEST(tokens: list[tokenize.TokenInfo]) -> SimpleNamespace:
    """[=[NAME]=] COMMAND"""
    itokens = iter(tokens)
    level: dict[str, int] = {"[": 0, "=": 0}
    name = io.StringIO()
    for token in itokens:
        if token.type == tokenize.OP:
            if token.string == "[":
                level["["] += 1
                continue
            elif token.string == "]":
                level["["] -= 1
                if level["["] == 0:
                    break
            elif token.string == "=":
                level["="] += 1
        if level["["] == 2:
            name.write(token.string)
    test = SimpleNamespace()
    test.name = name.getvalue()
    token = next(itokens)
    assert token.type == tokenize.STRING
    test.command = token.string[1:-1] if token.string.startswith(("'", '"')) else token.string
    return test


def write_pyt(name: str, command: str) -> str:
    file = os.path.join(os.path.dirname(command), f"{name}.pyt")
    with open(file, "w") as fh:
        fh.write("# This file was automatically generated by nvtest\n")
        fh.write("import sys\nimport nvtest\n")
        fh.write("nvtest.directives.keywords('ctest', 'unit')\n")
        fh.write("def test():\n")
        fh.write(f"    command = nvtest.Executable({command!r})\n")
        fh.write("    command()\n")
        fh.write("    return command.returncode\n")
        fh.write("if __name__ == '__main__':\n    sys.exit(test())\n")
    return file


@nvtest.plugin.register(scope="session", stage="discovery")
def ctest_to_pyt(session: nvtest.Session) -> None:
    exclude = (".git", ".nvtest", ".nvtest_cache")
    for root, paths in session.search_paths.items():
        if paths:
            # skip paths where tests are explicitly set
            continue
        for dir, dirs, files in os.walk(root):
            if os.path.dirname(dir) in exclude:
                del dirs[:]
                continue
            if "CTestTestfile.cmake" in files:
                _ctest_to_pyt(os.path.join(dir, "CTestTestfile.cmake"))
    return
