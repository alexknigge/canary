import json
import os
import subprocess
from typing import Optional

import nvtest

build_types: dict[str, str] = {}


@nvtest.plugin.register(scope="session", stage="discovery")
def ctest_to_pyt(session: nvtest.Session) -> None:
    cmake = nvtest.filesystem.which("make")
    if not cmake:
        return
    exclude = (".git", ".nvtest", ".nvtest_cache")
    for root, paths in session.search_paths.items():
        if paths:
            # skip paths where tests are explicitly set
            continue
        for dir, dirs, files in os.walk(root):
            if os.path.dirname(dir) in exclude:
                del dirs[:]
                continue
            if "CTestTestfile.cmake" in files:
                _ctest_to_pyt(os.path.join(dir, "CTestTestfile.cmake"))
    return


def find_build_type(directory) -> Optional[str]:
    if directory == os.path.sep:
        return None
    if directory in build_types:
        return build_types[directory]
    if os.path.exists(os.path.join(directory, "CMakeCache.txt")):
        with open(os.path.join(directory, "CMakeCache.txt")) as fh:
            for line in fh:
                if line.strip().startswith("CMAKE_BUILD_TYPE"):
                    _, build_type = line.split("=")
                    build_types[directory] = build_type
                    return build_type
    return find_build_type(os.path.dirname(directory))


def _write_pyt(
    name: str,
    *,
    command: str,
    args: Optional[list[str]] = None,
    WORKING_DIRECTORY: Optional[str] = None,
    WILL_FAIL: Optional[str] = None,
    TIMEOUT: Optional[str] = None,
    **kwds,
) -> str:
    file = os.path.join(os.getcwd(), f"{name}.pyt")
    with open(file, "w") as fh:
        fh.write("# This file was automatically generated by nvtest\n")
        fh.write("import sys\nimport nvtest\n")
        fh.write("nvtest.directives.keywords('ctest', 'unit')\n")
        if WILL_FAIL and WILL_FAIL.lower() in ("true", "on", "1"):
            fh.write("nvtest.directives.xfail()\n")
        if TIMEOUT:
            fh.write(f"nvtest.directives.timeout({float(TIMEOUT)})\n")
        fh.write("def test():\n")
        fh.write(f"    command = nvtest.Executable({command!r})\n")
        fh.write("    command(")
        if args:
            fh.write(", ".join(f"{_!r}" for _ in args))
        fh.write(")\n")
        fh.write("    return command.returncode\n")
        fh.write("if __name__ == '__main__':\n    sys.exit(test())\n")
    return file


def _ctest_to_pyt(file: str) -> list[str]:
    build_type = find_build_type(os.path.dirname(file))
    tests: dict = {}
    with nvtest.filesystem.working_dir(os.path.dirname(file)):
        try:
            with open(".nvtest.cmake", "w") as fh:
                if build_type:
                    fh.write(f"set(CTEST_CONFIGURATION_TYPE {build_type})\n")
                fh.write(cmake_script)
                fh.write("\n")
                fh.write(open(file).read())
            p = subprocess.Popen(
                ["cmake", "-P", ".nvtest.cmake"], stdout=subprocess.PIPE, stderr=subprocess.PIPE
            )
            p.wait()
            out, err = p.communicate()
            lines = [l.strip() for l in out.decode("utf-8").split("\n") if l.split()]
            lines.extend([l.strip() for l in err.decode("utf-8").split("\n") if l.split()])
            for line in lines:
                fd = json.loads(line)
                if "properties" in fd:
                    props = fd.pop("properties")
                    fd["properties"] = dict(zip(props[0::2], props[1::2]))
                if "args" in fd:
                    fd["args"] = [_.strip() for _ in fd["args"].split(";") if _.split()]
                d = tests.setdefault(fd.pop("name"), {})
                d.update(fd)
        finally:
            nvtest.filesystem.force_remove(".nvtest.cmake")
        files: list[str] = []
        for name, td in tests.items():
            f = _write_pyt(name, **td)
            files.append(f)
    return files


cmake_script = r"""
macro(add_test NAME COMMAND)
  message("{\"name\": \"${NAME}\", \"command\": \"${COMMAND}\", \"args\": \"${ARGN}\"}")
endmacro()

macro(subdirs)
  # Ignore subdirs since we just crawl looking for CTest files
endmacro()

macro(set_tests_properties NAME TITLE)
  set(properties)
  if(${TITLE} STREQUAL "PROPERTIES")
    foreach(ARG ${ARGN})
      if("${ARG}" MATCHES "^_.*")
        break()
      endif()
      list(APPEND properties "${ARG}")
    endforeach()
    message("{\"name\": \"${NAME}\", \"properties\": \"${properties}\"}")
  else()
    message(WARNING "Unknown TITLE ${TITLE}")
  endif()
endmacro()
"""
