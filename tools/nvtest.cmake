# CMake module
include(CMakeParseArguments)

# --- ADD_NVTEST --------------------------------------------------------------------- #
function(add_nvtest)
  macro(_print_usage)
    set(USAGE_STR "\nADD_NVTEST(NAME <name> <COMMAND <command>|SCRIPT <script>> ")
    string(APPEND "[NO_DEFAULT_LINK] [LINK link1 [link2...]])\n")
    string(APPEND "Add a nvtest unit test.\n")
    message("${USAGE_STR}")
  endmacro(_print_usage)
  cmake_parse_arguments(PARSED_ARGS "NO_DEFAULT_LINK" "NAME;COMMAND;SCRIPT" "LINK" ${ARGN})
  if(NOT PARSED_ARGS_NAME)
    _print_usage()
    message(FATAL_ERROR "Must define <name>")
  endif()
  set(NAME ${PARSED_ARGS_NAME})

  if(NOT PARSED_ARGS_COMMAND AND NOT PARSED_ARGS_SCRIPT)
    _print_usage()
    message(FATAL_ERROR "Must define exactly one of <command> or <script>")
  endif()

  if(PARSED_ARGS_COMMAND AND PARSED_ARGS_SCRIPT)
    _print_usage()
    message(FATAL_ERROR "Must define exactly one of <command> or <script>")
  endif()

  set(CONTENT "#!/usr/bin/env python3\nimport sys\nimport nvtest\n")
  string(APPEND CONTENT "nvtest.mark.keywords(\"fast\", \"unit_test\")\n")

  if(PARSED_ARGS_COMMAND)
    separate_arguments(COMMAND_LIST UNIX_COMMAND ${PARSED_ARGS_COMMAND})
    list(GET COMMAND_LIST 0 PROGRAM)
    if(NOT NO_DEFAULT_LINK)
      string(APPEND CONTENT "nvtest.mark.link(\"${PROGRAM}\")\n")
    endif()
    if(PARSED_ARGS_LINK)
      foreach(LINK_ARG ${PARSED_ARGS_LINK})
        string(APPEND CONTENT "nvtest.mark.link(\"${LINK_ARG}\")\n")
      endforeach()
    endif()
    string(APPEND CONTENT "def test():\n    cmd = nvtest.Executable(\"${PROGRAM}")
    list(LENGTH COMMAND_LIST N)
    if(N GREATER 1)
      list(SUBLIST COMMAND_LIST 1 -1 TMP)
      foreach(ARG ${TMP})
        string(APPEND CONTENT " ${ARG}")
      endforeach()
    endif()
    string(APPEND CONTENT "\")\n    cmd()\n    if cmd.returncode != 0:\n")
    string(APPEND CONTENT "        raise nvtest.TestFailed(\"${NAME}\")\n    return 0\n")
    string(APPEND CONTENT "if __name__ == \"__main__\":\n    sys.exit(test())\n")
    file(GENERATE OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pyt" CONTENT "${CONTENT}")
  else()
    get_filename_component(F ${PARSED_ARGS_SCRIPT} NAME)
    file(GENERATE OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${F}.pyt" INPUT "${PARSED_ARGS_SCRIPT}")
  endif()
endfunction()

# --- ADD_NVTEST --------------------------------------------------------------------- #
function(add_parallel_nvtest)
  macro(_print_usage)
    set(USAGE_STR "\nADD_PARALLEL_NVTEST(NAME <name> COMMAND <command> NPROC <nproc1 [nproc2...]> ")
    string(APPEND USAGE_STR "[NO_DEFAULT_LINK] [LINK link1 [link2...]])\n")
    string(APPEND USAGE_STR "Add a nvtest unit test.\n")
    message("${USAGE_STR}")
  endmacro(_print_usage)
  if(NOT MPI_FOUND)
    message(FATAL_ERROR "add_parallel_nvtest requires MPI")
  endif()
  cmake_parse_arguments(PARSED_ARGS "NO_DEFAULT_LINK" "NAME;COMMAND" "LINK;NPROC" ${ARGN})
  if(NOT PARSED_ARGS_NAME)
    _print_usage()
    message(FATAL_ERROR "Must define <name>")
  endif()
  set(NAME ${PARSED_ARGS_NAME})

  if(NOT PARSED_ARGS_COMMAND)
    _print_usage()
    message(FATAL_ERROR "Must define <command>")
  endif()

  if(NOT PARSED_ARGS_NPROC)
    _print_usage()
    message(FATAL_ERROR "Must define nproc1")
  endif()

  set(CONTENT "#!/usr/bin/env python3\nimport sys\nimport nvtest\n")
  string(APPEND CONTENT "nvtest.mark.keywords(\"fast\", \"unit_test\")\n")

  separate_arguments(COMMAND_LIST UNIX_COMMAND ${PARSED_ARGS_COMMAND})
  list(GET COMMAND_LIST 0 PROGRAM)
  if(NOT NO_DEFAULT_LINK)
    string(APPEND CONTENT "nvtest.mark.link(\"${PROGRAM}\")\n")
  endif()
  if(PARSED_ARGS_LINK)
    foreach(LINK_ARG ${PARSED_ARGS_LINK})
      string(APPEND CONTENT "nvtest.mark.link(\"${LINK_ARG}\")\n")
    endforeach()
  endif()
  string(REPLACE ";" ", " NPROC ${PARSED_ARGS_NPROC})
  string(APPEND CONTENT "nvtest.mark.parameterize(\"np\", [${NPROC}])\n")
  string(APPEND CONTENT "def test():\n")
  string(APPEND CONTENT "    self = nvtest.test.instance\n")
  string(APPEND CONTENT "    mpi = nvtest.Executable(\"${MPIEXEC_EXECUTABLE}\")\n")
  string(APPEND CONTENT "    args = [\"${MPIEXEC_NUMPROC_FLAG}\", str(self.parameters.np), ")
  string(APPEND CONTENT "\"${PROGRAM}\"")
  list(LENGTH COMMAND_LIST N)
  if(N GREATER 1)
    list(SUBLIST COMMAND_LIST 1 -1 TMP)
    foreach(ARG ${TMP})
      string(APPEND CONTENT ", \"${ARG}\"")
    endforeach()
  endif()
  string(APPEND CONTENT "]\n    mpi(*args)\n    if mpi.returncode != 0:\n")
  string(APPEND CONTENT "        raise nvtest.TestFailed(\"${NAME}\")\n    return 0\n")
  string(APPEND CONTENT "if __name__ == \"__main__\":\n    sys.exit(test())\n")
  file(GENERATE OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${NAME}.pyt" CONTENT "${CONTENT}")
endfunction()

# --- ADD_NVTEST_OPTIONS ------------------------------------------------------------- #
function(add_nvtest_options)
  macro(_print_usage)
    message("\nADD_NVTEST_OPTIONS(ON_OPTION <option>)\n Add option to nvtest options.\n")
  endmacro(_print_usage)
  cmake_parse_arguments(PARSED_ARGS "" "" "ON_OPTION" ${ARGN})
  if(NOT PARSED_ARGS_ON_OPTION)
    _print_usage()
    message(FATAL_ERROR "Must define <option>")
  endif()
  foreach(ON_OPTION ${PARSED_ARGS_ON_OPTION})
    list(APPEND NVTEST_ON_OPTIONS "${ON_OPTION}")
    list(REMOVE_DUPLICATES NVTEST_ON_OPTIONS)
  endforeach()
  set(NVTEST_ON_OPTIONS "${NVTEST_ON_OPTIONS}" CACHE STRING "" FORCE)
endfunction()

# --- WRITE_NVTEST_CONFIG ------------------------------------------------------------ #
function(add_nvtest_target)
  set(NVTEST_COMMAND nvtest)
  add_custom_target(
    nvtest
    VERBATIM
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND ${NVTEST_COMMAND} -w .
  )
endfunction()
function(write_nvtest_config)
  set_target_properties(nvtest PROPERTIES EXCLUDE_FROM_ALL TRUE)
  string(TIMESTAMP NOW)
  set(CONTENT "[build]\n")
  string(APPEND CONTENT "type = \"${CMAKE_BUILD_TYPE}\"\n")
  string(APPEND CONTENT "date = \"${NOW}\"\n")
  string(APPEND CONTENT "[build:compiler]\n")
  string(APPEND CONTENT "vendor = \"${CMAKE_C_COMPILER_ID}\"\n")
  string(APPEND CONTENT "version = \"${CMAKE_C_COMPILER_VERSION}\"\n")
  string(APPEND CONTENT "[build:compiler:paths]\n")
  if(DEFINED ENV{SPACK_CC})
    string(APPEND CONTENT "cc = \"$ENV{SPACK_CC}\"\n")
    string(APPEND CONTENT "cxx = \"$ENV{SPACK_CXX}\"\n")
    if(DEFINED ENV{SPACK_FC})
      string(APPEND CONTENT "fc = \"$ENV{SPACK_FC}\"\n")
    endif()
  else()
    string(APPEND CONTENT "cc = \"${CMAKE_C_COMPILER}\"\n")
    string(APPEND CONTENT "cxx = \"${CMAKE_CXX_COMPILER}\"\n")
    if(CMAKE_Fortran_COMPILER)
      string(APPEND CONTENT "fc = \"${CMAKE_Fortran_COMPILER}\"\n")
    endif()
  endif()
  if(NVTEST_ON_OPTIONS)
    string(APPEND CONTENT "[build:options]\n")
    foreach(OPT ${NVTEST_ON_OPTIONS})
      string(APPEND CONTENT "${OPT} = true\n")
    endforeach()
  endif()
  if(NVTEST_OFF_OPTIONS)
    string(APPEND CONTENT "[build:options]\n")
    foreach(OPT ${NVTEST_OFF_OPTIONS})
      string(APPEND CONTENT "${OPT} = false\n")
    endforeach()
  endif()
  file(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/nvtest.cfg" CONTENT "${CONTENT}")
endfunction()
